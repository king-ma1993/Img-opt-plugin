apply plugin: 'maven-publish'
apply plugin: 'signing'
//// task to generate source.jar
sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        groovy.srcDirs = ['src/main/groovy']
        resources.srcDirs = ['src/main/resources']
    }
}

task sourcesJar(type: Jar) {
    group 'build'
    archiveClassifier.set('sources')
}

javadoc {
    options.encoding = 'UTF-8'
    failOnError false
}

// task to generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    group 'build'
    from javadoc.getDestinationDir()
    archiveClassifier.set('javadoc')
}

//artifacts {
//    archives jar
//    archives javadocJar
//    archives sourcesJar
//}

// 此处不需修改，下面会读取 local.properties 中配置的信息
ext["PUBLISH_VERSION"] = '' //发布的版本
ext["PUBLISH_GROUP_ID"] = ''  //分组ID
ext["PUBLISH_ARTIFACT_ID"] = '' //
ext["signing.keyId"] = '' //签名的密钥后8位
ext["signing.password"] = ''  //签名设置的密码
ext["signing.secretKeyRingFile"] = '' //生成的secring.gpg文件目录
ext["ossrhUsername"] = ''  //sonatype用户名
ext["ossrhPassword"] = ''  //sonatype密码

// 遍历赋值
File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}



afterEvaluate {
    publishing {
        repositories {
            maven {
                //推送至远端的中央仓库，一旦发布release中央仓库版本，旧版本无法修改
                //一般都在  暂存库  中进行测试，然后确认无误后再发布到 release中央仓库
                allowInsecureProtocol = false
                name = PUBLISH_ARTIFACT_ID
                // 暂存库
//                def releasesRepoUrl = "https://s01.oss.sonatype.org/content/repositories/releases"
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                // 快照库（版本名以 SNAPSHOT 结尾，就推送至快照库）
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = PUBLISH_VERSION.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
            maven {
                // 推送至本地存储库，本机测试的时候可以用
                allowInsecureProtocol = false
                name = 'Local'
                url = uri('../ZrgkLocalRepo')
            }
        }
        publications {
            release(MavenPublication) {
                println("publish-maven Log-------> PUBLISH_GROUP_ID: $PUBLISH_GROUP_ID; PUBLISH_ARTIFACT_ID: $PUBLISH_ARTIFACT_ID; PUBLISH_VERSION: $PUBLISH_VERSION  username: $ossrhUsername" +
                        "password: $ossrhPassword")

                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // 生成的 aar 路径，修改成自己的aar地址名称
//                artifact("$buildDir/outputs/aar/face-release.aar")

                // 如果需要将源代码一起打包进aar，就打开此注释。
                artifact(jar)
                artifact(javadocJar)
                artifact(sourcesJar)

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = '这是一段SDK的项目描述' //项目描述
                    url = 'https://github.com/king-ma1993/Img-opt-plugin' //项目github链接
                    licenses {
                        license {
                            //协议类型，一般默认Apache License2.0的话不用改：
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            // 修改自己对应的用户名、邮箱
                            id = 'jadema' //你的sonatype用户名
                            name = 'jadenma' //你的sonatype用户名
                            email = '791017308@qq.com' //你的sonatype注册邮箱
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        //修改成你的Git地址：
                        connection = 'scm:git@github.com:king-ma1993/Img-opt-plugin.git'
                        developerConnection = 'scm:git@github.com:king-ma1993/Img-opt-plugin.git'
                        //分支地址：
                        url = 'https://github.com/king-ma1993/Img-opt-plugin'
                    }

                    withXml {
                        def dependenciesNode = asNode().appendNode("dependencies")
                        configurations.implementation.allDependencies.forEach() {
                            Dependency dependency ->
                                if (dependency.version != "unspecified" && dependency.name != "unspecified") {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', dependency.group)
                                    dependencyNode.appendNode('artifactId', dependency.name)
                                    dependencyNode.appendNode('version', dependency.version)
                                }
                        }
                    }
                }
            }
        }
    }
    signing {
        sign publishing.publications
    }
}



//signing {
//    sign configurations.archives
//}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment ->
//                signing.signPom(deployment)
//            }
//            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            pom.project {
//                packaging 'jar'
//                groupId GROUP
//                artifactId ARTIFACT_ID
//                version VERSION
//                name ARTIFACT_ID
//                description 'A gradle plugin for optimizing PNG.'
//                url 'https://github.com/chenenyu/img-optimizer-gradle-plugin'
//                scm {
//                    url 'https://github.com/chenenyu/img-optimizer-gradle-plugin'
//                    connection 'scm:git@github.com:chenenyu/img-optimizer-gradle-plugin.git'
//                    developerConnection 'scm:git@github.com:chenenyu/img-optimizer-gradle-plugin.git'
//                }
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        id 'chenenyu'
//                        name 'chenenyu'
//                        email 'chenenyux@gmail.com'
//                    }
//                }
//            }
//        }
//    }
//}
